# This file is generated by `generate_builtins.jl`. Do not edit by hand.

function getargs(args, frame)
    nargs = length(args)-1  # skip f
    callargs = resize!(frame.callargs, nargs)
    for i = 1:nargs
        callargs[i] = @eval_rhs(true, frame, args[i+1])
    end
    return callargs
end

function maybe_evaluate_builtin(frame, call_expr)
    # Builtin calls can't be handled by lowering, so we have to evaluate these directly.
    # We do this based on the call expression rather than using `to_function` because
    # both `to_function` and `isa(f, Core.Builtin)` are quite slow, as is the (dynamic)
    # evaluation. By having each call appearing statically in the "switch" block below,
    # each gets call-site optimized.

    args = call_expr.args
    nargs = length(args) - 1
    fex = args[1]
    if isa(fex, QuoteNode)
        f = fex.value
    else
        f = @eval_rhs(true, frame, fex)
    end
    # Builtins and intrinsics have empty method tables. We can circumvent
    # a long "switch" check by looking for this.
    mt = typeof(f).name.mt
    if isa(mt, Core.MethodTable)
        isempty(mt) || return call_expr
    end
    # Builtins
    if f === <:
        return Some{Any}(<:(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === ===
        return Some{Any}(===(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Core._apply
        return Some{Any}(Core._apply(getargs(args, frame)...))
    elseif f === Core._apply_latest
        return Some{Any}(Core._apply_latest(getargs(args, frame)...))
    elseif f === Core._apply_pure
        return Some{Any}(Core._apply_pure(getargs(args, frame)...))
    elseif f === Core._expr
        return Some{Any}(Core._expr(getargs(args, frame)...))
    elseif f === Core._typevar
        return Some{Any}(Core._typevar(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
    elseif f === Core.apply_type
        return Some{Any}(Core.apply_type(getargs(args, frame)...))
    elseif f === Core.arrayref
        return Some{Any}(Core.arrayref(getargs(args, frame)...))
    elseif f === Core.arrayset
        return Some{Any}(Core.arrayset(getargs(args, frame)...))
    elseif f === Core.arraysize
        return Some{Any}(Core.arraysize(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Core.sizeof
        return Some{Any}(Core.sizeof(@eval_rhs(true, frame, args[2])))
    elseif f === Core.svec
        return Some{Any}(Core.svec(getargs(args, frame)...))
    elseif f === applicable
        return Some{Any}(applicable(getargs(args, frame)...))
    elseif f === fieldtype
        if nargs == 2
            return Some{Any}(fieldtype(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
        elseif nargs == 3
            return Some{Any}(fieldtype(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
        end
    elseif f === getfield
        if nargs == 2
            return Some{Any}(getfield(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
        elseif nargs == 3
            return Some{Any}(getfield(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
        end
    elseif f === ifelse
        return Some{Any}(ifelse(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
    elseif f === invoke
        return Some{Any}(invoke(getargs(args, frame)...))
    elseif f === isa
        return Some{Any}(isa(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === isdefined
        if nargs == 1
            return Some{Any}(isdefined(@eval_rhs(true, frame, args[2])))
        elseif nargs == 2
            return Some{Any}(isdefined(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
        end
    elseif f === nfields
        return Some{Any}(nfields(@eval_rhs(true, frame, args[2])))
    elseif f === setfield!
        return Some{Any}(setfield!(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
    elseif f === throw
        return Some{Any}(throw(@eval_rhs(true, frame, args[2])))
    elseif f === tuple
        return Some{Any}(ntuple(i->@eval_rhs(true, frame, args[i+1]), length(args)-1))
    elseif f === typeassert
        return Some{Any}(typeassert(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === typeof
        return Some{Any}(typeof(@eval_rhs(true, frame, args[2])))
    # Intrinsics
    elseif f === Base.bitcast
        return Some{Any}(Base.bitcast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.neg_int
        return Some{Any}(Base.neg_int(@eval_rhs(true, frame, args[2])))
    elseif f === Base.add_int
        return Some{Any}(Base.add_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sub_int
        return Some{Any}(Base.sub_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.mul_int
        return Some{Any}(Base.mul_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sdiv_int
        return Some{Any}(Base.sdiv_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.udiv_int
        return Some{Any}(Base.udiv_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.srem_int
        return Some{Any}(Base.srem_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.urem_int
        return Some{Any}(Base.urem_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.add_ptr
        return Some{Any}(Base.add_ptr(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sub_ptr
        return Some{Any}(Base.sub_ptr(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.neg_float
        return Some{Any}(Base.neg_float(@eval_rhs(true, frame, args[2])))
    elseif f === Base.add_float
        return Some{Any}(Base.add_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sub_float
        return Some{Any}(Base.sub_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.mul_float
        return Some{Any}(Base.mul_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.div_float
        return Some{Any}(Base.div_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.rem_float
        return Some{Any}(Base.rem_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fma_float
        return Some{Any}(Base.fma_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
    elseif f === Base.muladd_float
        return Some{Any}(Base.muladd_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
    elseif f === Base.neg_float_fast
        return Some{Any}(Base.neg_float_fast(@eval_rhs(true, frame, args[2])))
    elseif f === Base.add_float_fast
        return Some{Any}(Base.add_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sub_float_fast
        return Some{Any}(Base.sub_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.mul_float_fast
        return Some{Any}(Base.mul_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.div_float_fast
        return Some{Any}(Base.div_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.rem_float_fast
        return Some{Any}(Base.rem_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.eq_int
        return Some{Any}(Base.eq_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ne_int
        return Some{Any}(Base.ne_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.slt_int
        return Some{Any}(Base.slt_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ult_int
        return Some{Any}(Base.ult_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sle_int
        return Some{Any}(Base.sle_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ule_int
        return Some{Any}(Base.ule_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.eq_float
        return Some{Any}(Base.eq_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ne_float
        return Some{Any}(Base.ne_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.lt_float
        return Some{Any}(Base.lt_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.le_float
        return Some{Any}(Base.le_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.eq_float_fast
        return Some{Any}(Base.eq_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ne_float_fast
        return Some{Any}(Base.ne_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.lt_float_fast
        return Some{Any}(Base.lt_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.le_float_fast
        return Some{Any}(Base.le_float_fast(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fpiseq
        return Some{Any}(Base.fpiseq(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fpislt
        return Some{Any}(Base.fpislt(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.and_int
        return Some{Any}(Base.and_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.or_int
        return Some{Any}(Base.or_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.xor_int
        return Some{Any}(Base.xor_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.not_int
        return Some{Any}(Base.not_int(@eval_rhs(true, frame, args[2])))
    elseif f === Base.shl_int
        return Some{Any}(Base.shl_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.lshr_int
        return Some{Any}(Base.lshr_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ashr_int
        return Some{Any}(Base.ashr_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.bswap_int
        return Some{Any}(Base.bswap_int(@eval_rhs(true, frame, args[2])))
    elseif f === Base.ctpop_int
        return Some{Any}(Base.ctpop_int(@eval_rhs(true, frame, args[2])))
    elseif f === Base.ctlz_int
        return Some{Any}(Base.ctlz_int(@eval_rhs(true, frame, args[2])))
    elseif f === Base.cttz_int
        return Some{Any}(Base.cttz_int(@eval_rhs(true, frame, args[2])))
    elseif f === Base.sext_int
        return Some{Any}(Base.sext_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.zext_int
        return Some{Any}(Base.zext_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.trunc_int
        return Some{Any}(Base.trunc_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fptoui
        return Some{Any}(Base.fptoui(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fptosi
        return Some{Any}(Base.fptosi(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.uitofp
        return Some{Any}(Base.uitofp(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.sitofp
        return Some{Any}(Base.sitofp(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fptrunc
        return Some{Any}(Base.fptrunc(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.fpext
        return Some{Any}(Base.fpext(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_sadd_int
        return Some{Any}(Base.checked_sadd_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_uadd_int
        return Some{Any}(Base.checked_uadd_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_ssub_int
        return Some{Any}(Base.checked_ssub_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_usub_int
        return Some{Any}(Base.checked_usub_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_smul_int
        return Some{Any}(Base.checked_smul_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_umul_int
        return Some{Any}(Base.checked_umul_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_sdiv_int
        return Some{Any}(Base.checked_sdiv_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_udiv_int
        return Some{Any}(Base.checked_udiv_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_srem_int
        return Some{Any}(Base.checked_srem_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.checked_urem_int
        return Some{Any}(Base.checked_urem_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.abs_float
        return Some{Any}(Base.abs_float(@eval_rhs(true, frame, args[2])))
    elseif f === Base.copysign_float
        return Some{Any}(Base.copysign_float(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.flipsign_int
        return Some{Any}(Base.flipsign_int(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
    elseif f === Base.ceil_llvm
        return Some{Any}(Base.ceil_llvm(@eval_rhs(true, frame, args[2])))
    elseif f === Base.floor_llvm
        return Some{Any}(Base.floor_llvm(@eval_rhs(true, frame, args[2])))
    elseif f === Base.trunc_llvm
        return Some{Any}(Base.trunc_llvm(@eval_rhs(true, frame, args[2])))
    elseif f === Base.rint_llvm
        return Some{Any}(Base.rint_llvm(@eval_rhs(true, frame, args[2])))
    elseif f === Base.sqrt_llvm
        return Some{Any}(Base.sqrt_llvm(@eval_rhs(true, frame, args[2])))
    elseif f === Base.pointerref
        return Some{Any}(Base.pointerref(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4])))
    elseif f === Base.pointerset
        return Some{Any}(Base.pointerset(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3]), @eval_rhs(true, frame, args[4]), @eval_rhs(true, frame, args[5])))
    elseif f === Base.cglobal
        if nargs == 1
            return Some{Any}(Base.cglobal(@eval_rhs(true, frame, args[2])))
        elseif nargs == 2
            return Some{Any}(Base.cglobal(@eval_rhs(true, frame, args[2]), @eval_rhs(true, frame, args[3])))
        end
    elseif f === Base.llvmcall
        return Some{Any}(Base.llvmcall(getargs(args, frame)...))
    elseif f === Base.arraylen
        return Some{Any}(Base.arraylen(@eval_rhs(true, frame, args[2])))
    end
    if isa(f, getfield(Core, Symbol("#kw##invoke")))
        return Some{Any}(getfield(Core, Symbol("#kw##invoke"))(getargs(args, frame)...))
    end
    return call_expr
end
