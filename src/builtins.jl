# This file is generated by `generate_builtins.jl`. Do not edit by hand.

getargs(args, stack, frame, pc) = Any[@eval_rhs(stack, frame, a, pc) for a in Iterators.drop(args, 1)]

function maybe_evaluate_builtin(stack, frame, call_expr, pc)
    # Builtin calls can't be handled by lowering, so we have to evaluate these directly.
    # We do this based on the call expression rather than using `to_function` because
    # both `to_function` and `isa(f, Core.Builtin)` are quite slow, as is the (dynamic)
    # evaluation. By having each call appearing statically in the "switch" block below,
    # each gets call-site optimized.

    args = call_expr.args
    fex = args[1]
    if isa(fex, GlobalRef)
        mod = fex.mod
        inBase = mod == Base || mod == Core
        while !inBase && mod != Main
            mod = parentmodule(mod)
            inBase = mod == Base || mod == Core
        end
        if inBase
            name = fex.name
            if fex.mod == Core.Compiler
                if name == :getproperty
                    name = :getfield
                elseif name == :setproperty!
                    name = :setfield!
                end
            end
            # Builtins
            if name == :(<:)
                return Some{Any}((<:)(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :(===)
                return Some{Any}((===)(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :_apply
                return Some{Any}(Core._apply(getargs(args, stack, frame, pc)...))
            elseif name == :_apply_latest
                return Some{Any}(Core._apply_latest(getargs(args, stack, frame, pc)...))
            elseif name == :_apply_pure
                return Some{Any}(Core._apply_pure(getargs(args, stack, frame, pc)...))
            elseif name == :_expr
                return Some{Any}(Core._expr(getargs(args, stack, frame, pc)...))
            elseif name == :_typevar
                return Some{Any}(Core._typevar(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc)))
            elseif name == :apply_type
                return Some{Any}(Core.apply_type(getargs(args, stack, frame, pc)...))
            elseif name == :arrayref
                return Some{Any}(Core.arrayref(getargs(args, stack, frame, pc)...))
            elseif name == :arrayset
                return Some{Any}(Core.arrayset(getargs(args, stack, frame, pc)...))
            elseif name == :arraysize
                return Some{Any}(Core.arraysize(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sizeof
                return Some{Any}(sizeof(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :svec
                return Some{Any}(Core.svec(getargs(args, stack, frame, pc)...))
            elseif name == :applicable
                return Some{Any}(applicable(getargs(args, stack, frame, pc)...))
            elseif name == :fieldtype
                return Some{Any}(fieldtype(getargs(args, stack, frame, pc)...))
            elseif name == :getfield
                return Some{Any}(getfield(getargs(args, stack, frame, pc)...))
            elseif name == :ifelse
                return Some{Any}(ifelse(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc)))
            elseif name == :invoke
                return Some{Any}(invoke(getargs(args, stack, frame, pc)...))
            elseif name == :isa
                return Some{Any}(isa(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :isdefined
                return Some{Any}(isdefined(getargs(args, stack, frame, pc)...))
            elseif name == :nfields
                return Some{Any}(nfields(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :setfield!
                return Some{Any}(setfield!(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc)))
            elseif name == :throw
                return Some{Any}(throw(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :tuple
                return Some{Any}(ntuple(i->@eval_rhs(stack, frame, args[i+1], pc), length(args)-1))
            elseif name == :typeassert
                return Some{Any}(typeassert(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :typeof
                return Some{Any}(typeof(@eval_rhs(stack, frame, args[2], pc)))
            # Intrinsics
            elseif name == :bitcast
                return Some{Any}(Base.bitcast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :neg_int
                return Some{Any}(Base.neg_int(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :add_int
                return Some{Any}(Base.add_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sub_int
                return Some{Any}(Base.sub_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :mul_int
                return Some{Any}(Base.mul_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sdiv_int
                return Some{Any}(Base.sdiv_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :udiv_int
                return Some{Any}(Base.udiv_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :srem_int
                return Some{Any}(Base.srem_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :urem_int
                return Some{Any}(Base.urem_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :add_ptr
                return Some{Any}(Base.add_ptr(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sub_ptr
                return Some{Any}(Base.sub_ptr(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :neg_float
                return Some{Any}(Base.neg_float(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :add_float
                return Some{Any}(Base.add_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sub_float
                return Some{Any}(Base.sub_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :mul_float
                return Some{Any}(Base.mul_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :div_float
                return Some{Any}(Base.div_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :rem_float
                return Some{Any}(Base.rem_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :fma_float
                return Some{Any}(Base.fma_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc)))
            elseif name == :muladd_float
                return Some{Any}(Base.muladd_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc)))
            elseif name == :neg_float_fast
                return Some{Any}(Base.neg_float_fast(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :add_float_fast
                return Some{Any}(Base.add_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sub_float_fast
                return Some{Any}(Base.sub_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :mul_float_fast
                return Some{Any}(Base.mul_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :div_float_fast
                return Some{Any}(Base.div_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :rem_float_fast
                return Some{Any}(Base.rem_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :eq_int
                return Some{Any}(Base.eq_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ne_int
                return Some{Any}(Base.ne_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :slt_int
                return Some{Any}(Base.slt_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ult_int
                return Some{Any}(Base.ult_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sle_int
                return Some{Any}(Base.sle_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ule_int
                return Some{Any}(Base.ule_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :eq_float
                return Some{Any}(Base.eq_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ne_float
                return Some{Any}(Base.ne_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :lt_float
                return Some{Any}(Base.lt_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :le_float
                return Some{Any}(Base.le_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :eq_float_fast
                return Some{Any}(Base.eq_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ne_float_fast
                return Some{Any}(Base.ne_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :lt_float_fast
                return Some{Any}(Base.lt_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :le_float_fast
                return Some{Any}(Base.le_float_fast(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :fpiseq
                return Some{Any}(Base.fpiseq(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :fpislt
                return Some{Any}(Base.fpislt(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :and_int
                return Some{Any}(Base.and_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :or_int
                return Some{Any}(Base.or_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :xor_int
                return Some{Any}(Base.xor_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :not_int
                return Some{Any}(Base.not_int(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :shl_int
                return Some{Any}(Base.shl_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :lshr_int
                return Some{Any}(Base.lshr_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ashr_int
                return Some{Any}(Base.ashr_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :bswap_int
                return Some{Any}(Base.bswap_int(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :ctpop_int
                return Some{Any}(Base.ctpop_int(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :ctlz_int
                return Some{Any}(Base.ctlz_int(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :cttz_int
                return Some{Any}(Base.cttz_int(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :sext_int
                return Some{Any}(Base.sext_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :zext_int
                return Some{Any}(Base.zext_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :trunc_int
                return Some{Any}(Base.trunc_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :fptoui
                return Some{Any}(Base.fptoui(getargs(args, stack, frame, pc)...))
            elseif name == :fptosi
                return Some{Any}(Base.fptosi(getargs(args, stack, frame, pc)...))
            elseif name == :uitofp
                return Some{Any}(Base.uitofp(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :sitofp
                return Some{Any}(Base.sitofp(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :fptrunc
                return Some{Any}(Base.fptrunc(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :fpext
                return Some{Any}(Base.fpext(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_sadd_int
                return Some{Any}(Base.checked_sadd_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_uadd_int
                return Some{Any}(Base.checked_uadd_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_ssub_int
                return Some{Any}(Base.checked_ssub_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_usub_int
                return Some{Any}(Base.checked_usub_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_smul_int
                return Some{Any}(Base.checked_smul_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_umul_int
                return Some{Any}(Base.checked_umul_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_sdiv_int
                return Some{Any}(Base.checked_sdiv_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_udiv_int
                return Some{Any}(Base.checked_udiv_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_srem_int
                return Some{Any}(Base.checked_srem_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :checked_urem_int
                return Some{Any}(Base.checked_urem_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :abs_float
                return Some{Any}(Base.abs_float(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :copysign_float
                return Some{Any}(Base.copysign_float(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :flipsign_int
                return Some{Any}(Base.flipsign_int(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc)))
            elseif name == :ceil_llvm
                return Some{Any}(Base.ceil_llvm(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :floor_llvm
                return Some{Any}(Base.floor_llvm(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :trunc_llvm
                return Some{Any}(Base.trunc_llvm(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :rint_llvm
                return Some{Any}(Base.rint_llvm(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :sqrt_llvm
                return Some{Any}(Base.sqrt_llvm(@eval_rhs(stack, frame, args[2], pc)))
            elseif name == :pointerref
                return Some{Any}(Base.pointerref(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc)))
            elseif name == :pointerset
                return Some{Any}(Base.pointerset(@eval_rhs(stack, frame, args[2], pc), @eval_rhs(stack, frame, args[3], pc), @eval_rhs(stack, frame, args[4], pc), @eval_rhs(stack, frame, args[5], pc)))
            elseif name == :cglobal
                return Some{Any}(Base.cglobal(getargs(args, stack, frame, pc)...))
            elseif name == :llvmcall
                return Some{Any}(Base.llvmcall(getargs(args, stack, frame, pc)...))
            elseif name == :arraylen
                return Some{Any}(Base.arraylen(@eval_rhs(stack, frame, args[2], pc)))
            end
        end
    end
    return call_expr
end
